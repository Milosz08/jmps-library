/*
 * Copyright (c) 2023 by multiple authors
 *
 * File name: build.gradle
 * Last modified: 15/02/2023, 02:01
 * Project name: jmps-library
 *
 * Licensed under the MIT license; you may not use this file except in compliance with the License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * THE ABOVE COPYRIGHT NOTICE AND THIS PERMISSION NOTICE SHALL BE INCLUDED IN ALL COPIES OR
 * SUBSTANTIAL PORTIONS OF THE SOFTWARE.
 *
 * The software is provided "as is", without warranty of any kind, express or implied, including but not limited
 * to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event
 * shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an
 * action of contract, tort or otherwise, arising from, out of or in connection with the software or the use
 * or other dealings in the software.
 */

plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    alias libs.plugins.dotenv.gradle
}

// NOTE: all 3rd part libraries in /gradle/libs.versions.toml file

ext {
    // maven nexus repository artifacts and additional package informations
    libraryVersion                  = '1.0.2_03'
    globalArtifactId                = 'pl.miloszgilga'
}

def modules = [ 'core', 'communication', 'file', 'gfx', 'security', 'oauth2' ]
def packager = System.getenv('BUILD_ENV') ?: 'maven'

initializeSignProperties()

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    version     = rootProject.ext.libraryVersion
    group       = rootProject.ext.globalArtifactId

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    // remove .plain.jar file from repository package
    jar {
        enabled = true
        archiveClassifier.set('')
    }
    test {
        useJUnitPlatform()
    }
    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId     = rootProject.ext.globalArtifactId
                artifactId  = project.properties["libraryArtifactId"]
                version     = rootProject.ext.libraryVersion
                from components.java
                pom {
                    name            = project.properties["libraryPomName"]
                    description     = "Java MultiPurpose Spring Library - ${project.properties["libraryPomDesc"]}"
                    url             = 'https://github.com/Milosz08/jmps-library'
                    inceptionYear   = '2022'
                    licenses {
                        license {
                            name    = 'MIT License'
                            url     = 'https://opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            id      = 'milosz08'
                            name    = 'MiÅ‚osz Gilga'
                            email   = 'personal@miloszgilga.pl'
                        }
                    }
                    scm {
                        connection              = 'scm:git:git:github.com/Milosz08/jmps-library.git'
                        developerConnection     = 'scm:git:ssh://github.com/Milosz08/jmps-library.git'
                        url                     = 'https://github.com/Milosz08/jmps-library'
                    }
                }
            }
        }
        if (packager == 'maven') {
            repositories {
                maven {
                    name = 'OSSRH'
                    url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                    credentials {
                        username = env.isPresent('OSSRH_USERNAME') ? env.OSSRH_USERNAME.value : ''
                        password = env.isPresent('OSSRH_PASSWORD') ? env.OSSRH_PASSWORD.value : ''
                    }
                }
            }
        }
    }
    if (packager == 'maven') {
        signing {
            sign publishing.publications
        }
    }
    // disable Java DockLint annoying warnings (enable only for checking HTML tags)
    javadoc {
        options.addBooleanOption('Xdoclint:html', true)
        options.addStringOption('Xmaxwarns', '1')
        options.author(true)
        options.encoding("UTF-8")
        options.bottom("(C) 2023 by Milosz Gilga personal@miloszgilga.pl")
    }
}

def initializeSignProperties() {
    if (env.isPresent('GPG_KEY_ID'))        project.ext.'signing.keyId' = env.GPG_KEY_ID.value
    if (env.isPresent('GPG_KEY_LOGIN'))     project.ext.'signing.password' = env.GPG_KEY_LOGIN.value
    if (env.isPresent('GPG_KEY_FILE'))      project.ext.'signing.secretKeyRingFile' = "$rootDir/$env.GPG_KEY_FILE.value"
}

// dependencies only for root project (grabbed all multi-modules into one single project module)
rootProject.dependencies {
    modules.each { moduleName ->
        api project(":jmpsl-${moduleName}")
    }
}

// dependencies for all subprojects
subprojects {
    dependencies {
        testImplementation  libs.junit.api
        testRuntimeOnly     libs.junit.engine
    }
}

tasks.register('packageAllToLocal', DefaultTask) {
    println('Packaging all modules to maven local repo...')
    modules.each { moduleName ->
        packageAllToLocal.dependsOn ":jmpsl-${moduleName}:publishToMavenLocal"
    }
}

tasks.register('packageAllToNexus', DefaultTask) {
    println('Packaging all modules to maven nexus repo...')
    modules.each { moduleName ->
        packageAllToNexus.dependsOn ":jmpsl-${moduleName}:publish"
    }
}
